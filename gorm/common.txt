type后的定义将会直接作用到create table语句中，你还可以设置 type:"int(11) unsigned auto_increment;"，且type有最高优先级
size只作用于类型为string或array或slice的字段，为string类型时判断size在0到65532之间时自动设置为varchar，大于65532时设置为longtext，否则自动设置为varbinary或longblob类型

1、Age字段后面的sql.NullInt64是什么意思？
    允许db中值为NULL的bigint类型
2、MemberNumber字段的类型是*string，和string有什么不同，什么时候使用指针类型？
    *string允许为空，也就是说允许设置为NULL，string默认值是空字符串，保存时前者设置为NULL，后者为空字符串
3、IgnoreMe字段后面的gorm:"-" // 忽略本字段，这个**“忽略本字段”**是什么意思？
    本字段不作为数据库的映射字段
4、Email字段unique_index和MemberNumber字段的unique有什么区别呢？
    唯一索引和唯一约束，mysql没有唯一约束。

注意当使用struct查询时，GORM将只查询那些具有值的字段
db.Where(&User{Name: "jinzhu", Age: 0}).Find(&users)
//// SELECT * FROM users WHERE name = "jinzhu";
你可以使用pointer类型或者scanner/valuer来避免
// Use pointer value
type User struct {
  gorm.Model
  Name string
  Age  *int
}

// Use scanner/valuer
type User struct {
  gorm.Model
  Name string
  Age  sql.NullInt64
}

type Order struct {
	ID              uint       `gorm:"primary_key;column:id;type:varchar(11);not null" json:""`
	OutTradeNo      string     `gorm:"column:out_trade_no;type:varchar(32);index:out_trade_no;not null"`
	CustomizationId int        `gorm:"column:customization_id;size:11;index:item_id;not null"`
	UserId          int        `gorm:"column:user_id;size:11;index:user_id;not null"`
	Price           int        `gorm:"column:price;size:11;not null"` // decimal(11,2)
	Number          int        `gorm:"column:number;size:11;not null"`
	Remark          string     `gorm:"column:remark;type:varchar(255);not null"`
	State           int        `gorm:"column:state;size:6;index:status;not null"`
	CreatedAt       *time.Time `gorm:"column:created_at;size:11;index:created_at;not null"`
	UpdatedAt       *time.Time `gorm:"column:updated_at;size:11;index:updated_at;not null"`
}