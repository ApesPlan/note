// 不可变性：不能有状态，只有常量和函数
// 函数只能有一个参数


type intGen func() int
func (g intGen) Read (p []byte) (n int, err error) {
    next := g()
    if next > 10000 {
        return 0, io.EOF
    }
    s := fmt.Sprintf("%d\n", next)
    return strings.NewReader(s).Read(p) 
}

func printFileContents(reader io.Reader) {
    scanner := buffio.NewSanner(reader)

    for scanner.Scan() {
        fmt.Println(scanner.Text())
    }
}

func writeFile(filename string) {
    file, err := os.Create(filename)
    if err != nil {
        panic(err)
    }
    defer file.Close()

    writer := bufio.NewWriter(file)
    defer writer.Flush() // 这样文件才有内容

    f := Fibonacci() // 斐波拉契数列
    for i := 0; i < 20; i ++ {
        fmt.Fprintln(writer, f())
    }
}

// 1, 1, 2, 3, 5, 8, 13, ...
func Fibonacci() func() int {
	a, b := 0, 1
	return func() int {
		a, b = b, a+b
		return a
	}
}

func main() {
    writeFile("2123.txt")
}

