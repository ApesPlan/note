// 简单函数
    func div(a, b int) (q, r int) {
        return a / b, a % b
    }
// q, r为返回值的变量名
    func div(a, b int) (q, r int) {
        q = a / b
        r = a % b
        return
    }
func main() {
    q, r := div(13, 3) // q, r函数自己默认变量，不影响使用者怎么改变
    // a, b := div(13, 3)
}

// 参数为函数 目的：简化代码
func apply(op func(int, int) int, a, b int) int {
    p := reflect.ValueOf(op).Pointer()
    opName := runtime.FuncForPc(p).Name()
    fmt.Printf("Calling function %s with args " + "(%d, %d)", opName, a, b)
// Calling function 包名.函数名（匿名函数为func1...） with args 参数 值
// fmt.Printf("Calling function %s with args " + "(%d, %d)", runtime.FuncForPc(reflect.ValueOf(op).Pointer()).Name(), a, b)

    return op (a, b)
}


func pow(a, b int) int {
// 注意参数类型
    return int(math.Pow(float64(a), float64(b)))
}

// 匿名函数
fmt.Println(apply(
// Calling function 包名.函数名（匿名函数为func1...） with args 参数 值
// fmt.Printf("Calling function %s with args " + "(%d, %d)", runtime.FuncForPc(reflect.ValueOf(op).Pointer()).Name(), a, b)
    func(a int, b int) int {
        return int(math.Pow(
            float64(a), float64(b)
        ))
    }, 3, 4
))

// 变长参数
func sumArgs(values ...int) int {
    sun := 0
    for i := range values {
        sum += values[i]
    }
    return sum
}