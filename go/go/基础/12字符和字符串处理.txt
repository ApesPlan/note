// rune 相当于go的char
// utf8.RuneCountInString获取字符数量

// 使用len获取字节长度
    fmt.Println(len(""))    0 
    fmt.Println(len([]string{""}))  1 

// 使用[]byte()将字符串转成字节切片

strings.Join([]int{1,2,3},"+") //error 必须显式的进行类型转换
strings.Join方法比普通的"str"+"str2"这种形式的字符串拼接效率更高，
这是因为string本身就是一个常量，那拼接成一个新字符串，就必须要销毁原string对象，
然后使当前引用指向新的字符串对象，这样做的开销是非常大的，而strings.Join则不用。

str := ""
fmt.Println(str[0]) // panic: runtime error: index out of range

// 字符串操作
    strings.Fields
    strings.Split
    strings.Join
    strings.Contains
    strings.Index
	strings.Repeat
	strings.Replace
    strings.ToLower
    strings.ToUpper
    strings.Trim strings.TrimRight strings.TrimLeft

// Format 系列函数把其它类型转换为字符串
	strconv.FormatBool()
	strconv.FormatFloat()
// Parse 系列把函数字符串转换为其它类型
	strconv.ParseBool()
	strconv.ParseFloat()
// Append 系列把函数将整数等转换为字符串后，添加到现有的字节数组中
	strconv.AppendBool()
	strconv.AppendFloat()

// utf8
s := "Yes我爱慕课网!" // UTF-8
for _, b := range []byte(s) { // 字节码 ASCII码
    fmt.Printf("%X ", b)
}
for i, ch := range s { // ch is a rune 
    fmt.Printf("(%d %X) ", i, ch)
}
fmt.Println("Rune count:", utf8.RuneCountInString(s)) // UTF-8 字符的个数
bytes := []byte(s)
for len(bytes) > 0 {
    ch, size := utf8.DecodeRune(bytes)
    bytes = bytes[size:]
    fmt.Printf("%c ", ch)
}
for i, ch := range []rune(s) { // 4个字节 rune
    fmt.Printf("(%d %c) ", i, ch)
}


// 寻找最长子串
func lengthOfNonRepeatingSubStr(s string) int {
	lastOccurred := make(map[rune]int)
	start := 0
	maxLength := 0

	for i, ch := range []rune(s) {
		if lastI, ok := lastOccurred[ch]; ok && lastI >= start {
			start = lastI + 1
		}
		if i-start+1 > maxLength {
			maxLength = i - start + 1
		}
		lastOccurred[ch] = i
	}

	return maxLength
}

fmt.Println(
		lengthOfNonRepeatingSubStr("pwwkew"))
	fmt.Println(
		lengthOfNonRepeatingSubStr(""))
	fmt.Println(
		lengthOfNonRepeatingSubStr("b"))
	fmt.Println(
		lengthOfNonRepeatingSubStr("abcdef"))
	fmt.Println(
		lengthOfNonRepeatingSubStr("这里是慕课网"))
	fmt.Println(
		lengthOfNonRepeatingSubStr("一二三二一"))
	fmt.Println(
		lengthOfNonRepeatingSubStr(
			"黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花"))