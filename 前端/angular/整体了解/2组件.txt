组件包含三部分：ts html css
一个组件类，它用来处理数据和功能。组件类中定义了商品数据和 share() 方法。 就是class中的属性和方法
一个 HTML 模板，它决定了用户的呈现方式。
组件专属的样式定义了外观和感觉。css

输入 import { Input } from '@angular/core';
    1.vscode创建angular组件
    到app目录上右击鼠标Generator Component 创建组件，会有三个文件ts html css
    2.打开ts
    ts
        import { Component, OnInit } from '@angular/core';

        @Component({
        selector: 'app-product-alerts',
        templateUrl: './product-alerts.component.html',
        styleUrls: ['./product-alerts.component.css']
        })
        export class ProductAlertsComponent implements OnInit {
        constructor() { }

        ngOnInit() {
        }

        }
    注意
    @Component 装饰器。这表明它下面的类是一个组件。它提供了有关该组件的元数据，包括它的模板、样式和选择器。
        1该 selector 用于标识该组件。该选择器是当 Angular 组件在页面中渲染出 HTML 元素时使用的名字。按照惯例，Angular 组件选择器会以前缀 app- 开头，后跟组件名称。
        2模板和样式文件名。它们是对另外两个生成的文件的引用。
    组件定义中还包含一个导出类（ ProductAlertsComponent ），用于处理该组件的功能。
    3.设置新商品提醒组件，让它接收一个商品作为输入：
    从 @angular/core 导入 Input。

    import { Component, OnInit } from '@angular/core';
    import { Input } from '@angular/core';

    在 ProductAlertsComponent 类的定义中，定义一个带 @Input 装饰器的 product 属性。
    @Input 装饰器指出其属性值是从组件的父组件（在本例中就是商品列表组件）中传入的。
        <div *ngFor="let product of products">
            <app-product-alerts
            [product]="product">
            </app-product-alerts>
        </div>

    export class ProductAlertsComponent implements OnInit {
    @Input() product;
    constructor() { }

    ngOnInit() {
    }

    }

输出 import { Output, EventEmitter } from '@angular/core';
    在组件类中，用 @Output 装饰器和一个事件发射器（EventEmitter）实例定义一个名为 notify 的属性。
    这可以让商品提醒组件在 notify 属性发生变化时发出事件。
        export class ProductAlertsComponent {
        @Input() product;
        @Output() notify = new EventEmitter();
        }
    用事件绑定更新“Notify Me”按钮，以调用 notify.emit() 方法。

        <p *ngIf="product.price > 700">
        <button (click)="notify.emit()">Notify Me</button>
        </p>

    应该由父组件（商品列表组件）采取行动，而不是商品提醒组件。
    在 product-list.component.ts 文件中，定义一个 onNotify() 方法，类似于 share() 方法：

        src/app/product-list/product-list.component.ts
        export class ProductListComponent {
            products = products;

            share() {
                window.alert('The product has been shared!');
            }

            onNotify() {
                window.alert('You will be notified when the product goes on sale');
            }
        }

    最后，修改商品列表组件以接收商品提醒组件的输出。

    在 product-list.component.html 中，把 app-product-alerts 组件（就是它显示的“Notify Me”按钮）的 notify 事件绑定到商品列表组件的 onNotify() 方法。

    src/app/product-list/product-list.component.html
        <button (click)="share()">
            Share
        </button>

        <app-product-alerts
        [product]="product" 
        (notify)="onNotify()">
        </app-product-alerts>


