ngOnInit  // Angular 在创建组件后立刻调用它
    ngOnInit() { this.logIt(`OnInit`); }
指令和组件的实例有一个生命周期：当 Angular 新建、更新和销毁它们时触发。
通过实现一个或多个 Angular core 库里定义的生命周期钩子接口，开发者可以介入该生命周期中的这些关键时刻。
每个接口都有唯一的一个钩子方法，它们的名字是由接口名再加上 ng 前缀构成的。
比如，OnInit 接口的钩子方法叫做 ngOnInit， Angular 在创建组件后立刻调用它
没有指令或者组件会实现所有这些接口，并且有些钩子只对组件有意义。
只有在指令/组件中定义过的那些钩子方法才会被 Angular 调用。

ngOnChanges()
    当 Angular（重新）设置数据绑定输入属性时响应。 该方法接受当前和上一属性值的 SimpleChanges 对象
    在 ngOnInit() 之前以及所绑定的一个或多个输入属性的值发生变化时都会调用。

ngOnInit()
    在 Angular 第一次显示数据绑定和设置指令/组件的输入属性之后，初始化指令/组件。
    在第一轮 ngOnChanges() 完成之后调用，只调用一次。

ngDoCheck()
    检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应。
    在每个变更检测周期中，紧跟在 ngOnChanges() 和 ngOnInit() 后面调用。

ngAfterContentInit()
    当 Angular 把外部内容投影进组件/指令的视图之后调用。
    第一次 ngDoCheck() 之后调用，只调用一次。

ngAfterContentChecked()
    每当 Angular 完成被投影组件内容的变更检测之后调用。
    ngAfterContentInit() 和每次 ngDoCheck() 之后调用

ngAfterViewInit()
    当 Angular 初始化完组件视图及其子视图之后调用。
    第一次 ngAfterContentChecked() 之后调用，只调用一次。

ngAfterViewChecked()
    每当 Angular 做完组件视图和子视图的变更检测之后调用。
    ngAfterViewInit() 和每次 ngAfterContentChecked() 之后调用。

ngOnDestroy()
    每当 Angular 每次销毁指令/组件之前调用并清扫。 在这儿反订阅可观察对象和分离事件处理器，以防内存泄漏。
    在 Angular 销毁指令/组件之前调用。

构造函数本质上不应该算作 Angular 的钩子。 记录确认了在创建期间那些输入属性(这里是 name 属性)没有被赋值。