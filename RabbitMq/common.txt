docker run -d --hostname my-rabbit --name rmq -p 15672:15672 -p 5672:5672 -p 25672:25672 -e RABBITMQ_DEFAULT_USER=用户名 -e RABBITMQ_DEFAULT_PASS=密码 rabbitmq:3-management

5672：连接生产者、消费者的端口。 
15672：WEB管理页面的端口。 
25672：分布式集群的端口。

Producer：生产者，负责生产消息。 
Connect：连接，生产者与RMQ Server之间建立的TCP连接。 
Channel：信道，一条连接可包含多条信道，不同信道之间通信互不干扰。考虑下多线程应用场景，每个线程对应一条信道，而不是对应一条连接，这样可以提高性能。 
body：消息主体，要传递的数据。 
exchange：交换器，负责把消息转发到对应的队列。交换器本身没有缓存消息的功能，消息是在队列中缓存的，如果队列不存在，则交换器会直接丢弃消息。常用的有四种类型的交换器：direct、fanout、topic、headers。不同类型的交换器有不同的交换规则，交换器会根据交换规则把消息转发到对应的队列。 
exchangeName：交换器名称，每个交换器对应一个名称，发送消息时会附带交换器名称，根据交换器名称选择对应的交换器。 
queue：队列，用于缓存消息。 
BandingKey：绑定键，一个队列可以有一个到多个绑定键，通过绑定操作可以绑定交换器和队列，交换器会根据绑定键的名称找到对应的队列。 
RotingKey：路由键，发送消息时，需要附带一条路由键，交换器会对路由键和绑定键进行匹配，如果匹配成功，则消息会转发到绑定键对应的队列中。 
Consumer：消费者，负责处理消息。


docker run -d --hostname rabbitmq_node --name rabbit \
-p 5672:5672 -p 15672:15672 -p 25672:25672 \
-v /data/rabbitmq_node:/var/lib/rabbitmq rabbitmq:management













